devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
usethis::use_testthat()
usethis::use_test("prepare_data")
devtools::document()
devtools::test()
devtools::document()
devtools::load_all()
devtools::document()
devtools::test()
devtools::document()
devtools::load_all()
usethis::use_test("setup_parallel")
devtools::document()
usethis::use_test("perform_analysis")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
ff25 <- read.csv("data/FF25.csv")
result <- ren(dat, date_column_index = 1, start_date = '19990101', end_date = '20231231', num_cores = 7)
result <- ren(ff25, date_column_index = 1, start_date = '19990101', end_date = '20231231', num_cores = 7)
result <- ren(ff25, date_column_index = 1, start_date = '19990101', end_date = '20231231', num_cores = 7)
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
usethis::use_test("ren")
usethis::use_test("perform_analysis")
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::build_readme()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_readme()
library(REN)
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Example data frame (replace this with your actual data)
ff25 <- read.csv("REN/data/FF25.csv")
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Prepare the data for analysis
prepared_data <- prepare_data(ff25)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::install()
library(REN)
# Set up parallel processing with the default number of cores
cl <- setup_parallel()
# Or specify the number of cores explicitly
cl <- setup_parallel(num_cores = 7)
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Stop the parallel cluster
stopCluster(cl)
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Prepare the data for analysis
prepared_data <- prepare_data(ff25)
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
7
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Prepare the data for analysis
prepared_data <- prepare_data(ff25)
library(REN)
library(REN)
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Stop the parallel cluster
stopCluster(cl)
# Example data frame (replace this with your actual data)
ff25 <- read.csv("data/FF25.csv")
# Prepare the data for analysis
prepared_data <- prepare_data(ff25)
# Define the input parameters (replace these with your actual data)
x <- prepared_data$x  # Numeric matrix of asset returns
mon <- prepared_data$mon  # Vector of months since start date
count <- prepared_data$count  # Vector of counts per month
Date <- prepared_data$Date  # Vector of dates
# Perform the portfolio analysis
results <- perform_analysis(x = x, mon = mon, count = count, Date = Date)
# Define the input parameters (replace these with your actual data)
x <- prepared_data$x  # Numeric matrix of asset returns
mon <- prepared_data$mon  # Vector of months since start date
count <- prepared_data$count  # Vector of counts per month
Date <- prepared_data$Date  # Vector of dates
# Perform the portfolio analysis
results <- perform_analysis(x, mon = mon, count = count, Date = Date)
# Define the input parameters (replace these with your actual data)
data_prep <- prepare_data(dat, date_column_index, start_date, end_date)
# Define the input parameters (replace these with your actual data)
data_prep <- prepare_data(ff25, date_column_index, start_date, end_date)
# Load the dataset (replace with your actual data path)
ff25 <- read.csv("data/FF25.csv")
# Define the date column index, start date, and end date
date_column_index <- 1  # Update this based on your data
start_date <- as.Date("2000-01-01")  # Adjust as needed
end_date <- as.Date("2020-12-31")  # Adjust as needed
# Prepare the data for analysis
data_prep <- prepare_data(ff25, date_column_index, start_date, end_date)
x <- data_prep$x
mon <- data_prep$mon
count <- data_prep$count
Date <- data_prep$Date
# Perform the portfolio analysis
result <- perform_analysis(x, mon, count, Date, num_cores)
library(REN)
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Check the number of cores
num_cores <- length(cl)
cl <- setup_parallel(num_cores = 4)
num <- detectCores()
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
cl <- setup_parallel(num_cores = 4)
cl <- setup_parallel(num_cores = 4)
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
num_cores <- length(cl)
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Stop the parallel cluster
stopCluster(cl)
# Load the dataset (replace with your actual data path)
ff25 <- read.csv("data/FF25.csv")
# Define the date column index, start date, and end date
date_column_index <- 1  # Update this based on your data
start_date <- as.Date("2000-01-01")  # Adjust as needed
end_date <- as.Date("2020-12-31")  # Adjust as needed
# Prepare the data for analysis
data_prep <- prepare_data(ff25, date_column_index, start_date, end_date)
x <- data_prep$x
mon <- data_prep$mon
count <- data_prep$count
Date <- data_prep$Date
# Set up parallel processing with the default number of cores or choose a specific number
cl <- setup_parallel()
# Load the dataset (replace with your actual data path)
ff25 <- read.csv("data/FF25.csv")
# Define the date column index, start date, and end date
date_column_index <- 1  # Update this based on your data
start_date <- as.Date("2000-01-01")  # Adjust as needed
end_date <- as.Date("2020-12-31")  # Adjust as needed
# Prepare the data for analysis
data_prep <- prepare_data(ff25, date_column_index, start_date, end_date)
x <- data_prep$x
mon <- data_prep$mon
count <- data_prep$count
Date <- data_prep$Date
# Perform the portfolio analysis
result <- perform_analysis(x, mon, count, Date, num_cores)
# Load the dataset (replace with your actual data path)
ff25 <- read.csv("data/FF25.csv")
# Define the date column index, start date, and end date
date_column_index <- 1  # Update this based on your data
start_date <- "19990101"  # Adjust as needed
end_date <- "20231231"  # Adjust as needed
# Prepare the data for analysis
data_prep <- prepare_data(ff25, date_column_index, start_date, end_date)
x <- data_prep$x
mon <- data_prep$mon
count <- data_prep$count
Date <- data_prep$Date
# Perform the portfolio analysis
result <- perform_analysis(x, mon, count, Date, num_cores)
# Accessing the results
cumulative_return_plot <- result$cumulative_return_plot
turnover_mean <- result$turnover_mean
sharpe_ratio <- result$sharpe_ratio
volatility <- result$volatility
max_drawdown <- result$max_drawdown
# Display the cumulative return plot
print(cumulative_return_plot)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_readme()
